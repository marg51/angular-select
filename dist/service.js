// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('mg-select', []).factory('mgSelectService', function($window) {
    var $scope;
    $scope = {};
    $scope.selection = [0, 0];

    /*
    			Set selection to the `elm` / position of cursor
    			@param elm DomNode textarea or input that we update the selection
    			@param updateSelection boolean 
    
    			@return this
     */
    $scope.setSelection = function(elm, updateSelection) {
      if (updateSelection == null) {
        updateSelection = true;
      }
      if (updateSelection === true) {
        $scope.updateSelection();
      }
      $scope.setSelectionRange(elm, $scope.selection[0], $scope.selection[1]);
      return $scope;
    };

    /*
    			Update position based on the current selection, or last position of click
    			@param elm DomNode|jQliteElement|null, we define selection against that parent element instead of the first parent found
    
    			@return this
     */
    $scope.updateSelection = function(elm) {
      var baseNode, end, increment, parent, selection, start, _ref;
      if (elm == null) {
        elm = null;
      }
      selection = $window.getSelection() || {};
      start = selection.baseOffset || selection.anchorOffset || 0;
      end = selection.extentOffset || selection.focusOffset || 0;
      baseNode = selection.baseNode || selection.anchorNode || 0;
      if (start > end) {
        _ref = [start, end], end = _ref[0], start = _ref[1];
      }
      increment = 0;
      if (elm != null) {
        parent = elm[0] || elm;
        increment = $scope.deepCount(parent, baseNode);
      }
      $scope.selection = [start + increment, end + increment];
      return $scope;
    };

    /*
    			Low level setSelection based on positions given
    
    			@param elm DomNode
    			@param selectionStart int
    			@param selectionEnd int
     */
    $scope.setSelectionRange = function(elm, selectionStart, selectionEnd) {
      var range, _ref;
      if (selectionStart > selectionEnd) {
        _ref = [selectionStart, selectionEnd], selectionEnd = _ref[0], selectionStart = _ref[1];
      }
      if (elm.createTextRange) {
        range = elm.createTextRange();
        range.collapse(true);
        range.moveEnd('character', selectionEnd);
        range.moveStart('character', selectionStart);
        return range.select();
      } else if (elm.setSelectionRange !== void 0) {
        elm.focus();
        return elm.setSelectionRange(selectionStart, selectionEnd);
      }
    };

    /*
    			Determine positions based on the parent node
    
    			@param parentNode DomNode
    			@parent baseNode DomNode
     */
    $scope.deepCount = function(parentNode, baseNode) {
      var count, forloop, found;
      count = 0;
      found = false;
      forloop = function(parentNode, baseNode) {
        var child, _i, _len, _ref;
        _ref = parentNode.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (found || child === baseNode) {
            found = true;
            break;
          }
          if (child.nodeType === 3 && child !== baseNode) {
            count += child.length;
          }
          if (child.nodeType === 1 && child.childNodes.length > 0) {
            forloop(child, baseNode);
          } else if (child.nodeName === "BR") {
            count++;
          }
        }
        return count;
      };
      forloop(parentNode, baseNode);
      return count;
    };
    return $scope;
  });

}).call(this);
